/*
 * This source file was generated by the Gradle 'init' task
 */
package flink.java.client;

import org.apache.flink.api.common.eventtime.WatermarkStrategy;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.connector.base.DeliveryGuarantee;
import org.apache.flink.connector.kafka.sink.KafkaRecordSerializationSchema;
import org.apache.flink.connector.kafka.sink.KafkaSink;
import org.apache.flink.connector.kafka.source.KafkaSource;
import org.apache.flink.connector.kafka.source.enumerator.initializer.OffsetsInitializer;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

public class App {
    public static void main(String[] args) {
        // Flink 실행 환경 설정
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        
        // Kafka 소스 설정
        KafkaSource<String> kafkaSource = KafkaSource.<String>builder()
                .setBootstrapServers("localhost:29092,localhost:39092,localhost:49092")
                .setTopics("input-topic")
                .setGroupId("flink-consumer-group")
                .setStartingOffsets(OffsetsInitializer.earliest())
                .setValueOnlyDeserializer(new SimpleStringSchema()) // 메시지를 문자열로 직렬화
                .build();

        // Kafka 소스로부터 데이터를 읽고 `flatMap` 연산 적용
        SentenceToWordsSplitter splitter = new SentenceToWordsSplitter();
        DataStream<String> words = env.fromSource(kafkaSource, WatermarkStrategy.noWatermarks(), "Kafka Source")
                .flatMap(splitter)
                .name("Word Splitter"); // 연산 이름 설정

        // Kafka Sink 설정
        KafkaSink<String> kafkaSink = KafkaSink.<String>builder()
                .setBootstrapServers("localhost:29092,localhost:39092,localhost:49092")
                .setRecordSerializer(KafkaRecordSerializationSchema.builder()
                        .setTopic("output-topic")  // 데이터를 전송할 Kafka 출력 토픽
                        .setValueSerializationSchema(new SimpleStringSchema())  // 데이터를 문자열로 직렬화
                        .build()
                )
                .setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)  // 최소 1회 전송 보장
                .build();

        // Kafka Sink에 데이터 스트림 연결
        words.sinkTo(kafkaSink);

        // Flink 작업 실행
        try{
            env.execute("Kafka Word Splitter");
        }catch(Exception e){

        }
    }
}
