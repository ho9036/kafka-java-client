/*
 * This source file was generated by the Gradle 'init' task
 */
package word.path;

import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Map;
import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.Serializer;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;

public class App {
    public static void main(String[] args) {
        ObjectMapper mapper = new ObjectMapper();
        try (InputStream inputStream = Word.class.getResourceAsStream("/words.json")) {
            // JSON array를 Word 배열로 매핑
            Word[] words = mapper.readValue(inputStream, Word[].class);
            
            Properties producerProperties = new Properties();
            producerProperties.put("bootstrap.servers", "localhost:29092,localhost:39092,localhost:49092");
            producerProperties.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
            producerProperties.put("value.serializer", WordSerializer.class.getName());

            KafkaProducer<String, Word> producer = new KafkaProducer<>(producerProperties);
            
            int totalWeight = Arrays.stream(words).mapToInt(Word::getWeight).sum();
            String[] keys = {"a01", "b02", "c03", "40d"};
            int index = 0;
            while (true) {  // 무한 루프
                try {
                    Thread.sleep(20);

                    String key = keys[(int) (Math.random() * keys.length)];

                    int randomWeight = (int) (Math.random() * totalWeight);
                    int sumWeight = 0;
                    for (Word word : words) {
                        sumWeight += word.getWeight();
                        if (randomWeight < sumWeight) {
                            index = Arrays.asList(words).indexOf(word);
                            break;
                        }
                    }

                    ProducerRecord<String, Word> record = new ProducerRecord<>("input-topic", key, words[index]);
                    producer.send(record, (RecordMetadata metadata, Exception exception) -> {
                        System.out.printf("key=%s, value=%s, partition=%d, offset=%d%n", key, "non", metadata.partition(), metadata.offset());
                    });                
                } catch (InterruptedException e) {
                    producer.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static class Word{
        private String word;
        private int weight;
        private LocalDateTime timestamp = LocalDateTime.now();

        public Word() {
            // 기본 생성자 필요
        }

        public Word(@JsonProperty("word") String word, @JsonProperty("weight") int weight){
            this.word = word;
            this.weight = weight;
            this.timestamp = LocalDateTime.now();
        }

        public String getWord(){
            return word;
        }

        public int getWeight(){
            return weight;
        }

        public LocalDateTime getTimestamp(){
            return timestamp;
        }
    }

    public static class WordSerializer implements Serializer<Word> {

        private static final DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

        public WordSerializer() {
            // 기본 생성자 필요
        }

        @Override
        public void configure(Map<String, ?> configs, boolean isKey) {
            // 설정이 필요한 경우 구현
        }

        @Override
        public byte[] serialize(String topic, Word data) {
            if (data == null) {
                return null;
            }

            byte[] wordBytes = data.getWord().getBytes(StandardCharsets.UTF_8);
            int wordLength = wordBytes.length;

            byte[] timestampBytes = data.getTimestamp().format(formatter).getBytes(StandardCharsets.UTF_8);
            int timestampLength = timestampBytes.length;

            ByteBuffer buffer = ByteBuffer.allocate(4 + wordLength + 4 + 4 + timestampLength);
            buffer.putInt(wordLength);
            buffer.put(wordBytes);
            buffer.putInt(data.getWeight());
            buffer.putInt(timestampLength);
            buffer.put(timestampBytes);

            return buffer.array();
        }

        @Override
        public void close() {
            // 리소스 정리가 필요한 경우 구현
        }
    }
}
